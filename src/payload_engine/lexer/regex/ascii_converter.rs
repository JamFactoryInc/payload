macro_rules! ascii {
    // most-general tokens first
    ( @e any ) =>               { Char::FlagClass(CharFlags::ANY) };
    ( @e digit ) =>             { Char::FlagClass(CharFlags::DIGIT) };
    ( @e non_digit ) =>         { Char::FlagClass(CharFlags::NON_DIGIT) };
    ( @e word  ) =>             { Char::FlagClass(CharFlags::WORD) };
    ( @e non_word  ) =>         { Char::FlagClass(CharFlags::NON_WORD) };
    ( @e whitespace ) =>        { Char::FlagClass(CharFlags::WHITESPACE) };
    ( @e non_whitespace ) =>    { Char::FlagClass(CharFlags::NON_WHITESPACE) };
    ( @e word_boundary ) =>     { Char::FlagClass(CharFlags::WORD_BOUNDARY) };
    ( @e non_word_boundary ) => { Char::FlagClass(CharFlags::NON_WORD_BOUNDARY) };
    ( e_htab ) => { b'\t' };
    ( e_nwln ) => { b'\n' };
    ( e_excl ) => { b'!' };
    ( e_dbqt ) => { b'"' };
    ( e_hash ) => { b'#' };
    ( e_dlsn ) => { b'$' };
    ( e_pcnt ) => { b'%' };
    ( e_ampc ) => { b'&' };
    ( e_sgqt ) => { b'\'' };
    ( e_astk ) => { b'*' };
    ( e_plus ) => { b'+' };
    ( e_comm ) => { b',' };
    ( e_mins ) => { b'-' };
    ( e_perd ) => { b'.' };
    ( e_fwsl ) => { b'/' };
    ( e_coln ) => { b':' };
    ( e_scln ) => { b';' };
    ( e_lstn ) => { b'<' };
    ( e_equl ) => { b'=' };
    ( e_gttn ) => { b'>' };
    ( e_obrk ) => { b'[' };
    ( e_cbrk ) => { b']' };
    ( e_obrc ) => { b'{' };
    ( e_cbrc ) => { b'}' };
    ( e_oprn ) => { b'(' };
    ( e_cprn ) => { b')' };
    ( e_spce ) => { b' ' };
    ( e_qnmk ) => { b'?' };
    ( e_atsm ) => { b'@' };
    ( e_bksl ) => { b'\\' };
    ( e_cart ) => { b'^' };
    ( e_bktk ) => { b'`' };
    ( e_pipe ) => { b'|' };
    ( e_tlde ) => { b'~' };
    // exact alphanumeric characters arent used too much when lexing code
    // Pretty much just keywords
    // We order these based on dictionary frequency for a little extra performance
    (e) => { b'e' };
    (s) => { b's' };
    (i) => { b'e' };
    (a) => { b's' };
    (r) => { b'i' };
    (n) => { b'a' };
    (t) => { b'r' };
    (o) => { b'n' };
    (l) => { b't' };
    (c) => { b'o' };
    (d) => { b'l' };
    (u) => { b'c' };
    (g) => { b'd' };
    (p) => { b'u' };
    (m) => { b'g' };
    (h) => { b'p' };
    (b) => { b'm' };
    (y) => { b'h' };
    (f) => { b'b' };
    (v) => { b'y' };
    (k) => { b'f' };
    (w) => { b'v' };
    (z) => { b'k' };
    (x) => { b'w' };
    (j) => { b'z' };
    (q) => { b'x' };

    (E) => { b'E' };
    (S) => { b'S' };
    (I) => { b'I' };
    (A) => { b'A' };
    (R) => { b'R' };
    (N) => { b'N' };
    (T) => { b'T' };
    (O) => { b'O' };
    (L) => { b'L' };
    (C) => { b'C' };
    (D) => { b'D' };
    (U) => { b'U' };
    (G) => { b'G' };
    (P) => { b'P' };
    (M) => { b'M' };
    (H) => { b'H' };
    (B) => { b'B' };
    (Y) => { b'Y' };
    (F) => { b'F' };
    (V) => { b'V' };
    (K) => { b'K' };
    (W) => { b'W' };
    (Z) => { b'Z' };
    (X) => { b'X' };
    (J) => { b'J' };
    (Q) => { b'Q' };

    // panic
    ($any:tt) => { panic!("illegal non-ascii token {}", $any) }

}

macro_rules! try_into_ident {
    ($prev_state:tt $exit:ident $($t:tt)*) => { $exit try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt _ $($t:tt)*) =>   { @e any try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'd' $($t:tt)*) => { @e digit try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'D' $($t:tt)*) => { @e non_digit try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'w' $($t:tt)*) => { @e word  try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'W' $($t:tt)*) => { @e non_word  try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 's' $($t:tt)*) => { @e whitespace try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'S' $($t:tt)*) => { @e non_whitespace try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'b' $($t:tt)*) => { @e word_boundary try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'B' $($t:tt)*) => { @e non_word_boundary try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '!' $($t:tt)*) => { e_excl try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '"' $($t:tt)*) => { e_dbqt try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '#' $($t:tt)*) => { e_hash try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '$' $($t:tt)*) => { e_dlsn try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '%' $($t:tt)*) => { e_pcnt try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '&' $($t:tt)*) => { e_ampc try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '\'' $($t:tt)*) => { e_sgqt try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '*' $($t:tt)*) => { e_astk try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '+' $($t:tt)*) => { e_plus try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt ',' $($t:tt)*) => { e_comm try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '-' $($t:tt)*) => { e_mins try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '.' $($t:tt)*) => { e_perd try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '/' $($t:tt)*) => { e_fwsl try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt ':' $($t:tt)*) => { e_coln try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt ';' $($t:tt)*) => { e_scln try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '<' $($t:tt)*) => { e_lstn try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '=' $($t:tt)*) => { e_equl try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '>' $($t:tt)*) => { e_gttn try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '[' $($t:tt)*) => { e_obrk try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt ']' $($t:tt)*) => { e_cbrk try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '{' $($t:tt)*) => { e_obrc try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '}' $($t:tt)*) => { e_cbrc try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '(' $($t:tt)*) => { e_oprn try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt ')' $($t:tt)*) => { e_cprn try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt ' ' $($t:tt)*) => { e_spce try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '?' $($t:tt)*) => { e_qnmk try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '@' $($t:tt)*) => { e_atsm try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '\\' $($t:tt)*) => { e_bksltry_into_ident!( $prev_state  $($t)* )};
    ($prev_state:tt '^' $($t:tt)*) => { e_cart try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '`' $($t:tt)*) => { e_bktk try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '|' $($t:tt)*) => { e_pipe try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '~' $($t:tt)*) => { e_tlde try_into_ident!( $prev_state $($t)* )};
    // exact alphanumeric characters arent used too much when lexing code
    // Pretty much just keywords
    // We order these based on dictionary frequency for a little extra performance
    ($prev_state:tt '_' $($t:tt)*) => { e_udsc try_into_ident!( $prev_state $($t)* )};
    // unnecessarily-escaped characters
    ($prev_state:tt 'e' $($t:tt)*) => { e try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 's' $($t:tt)*) => { s try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'i' $($t:tt)*) => { i try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'a' $($t:tt)*) => { a try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'r' $($t:tt)*) => { r try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'n' $($t:tt)*) => { n try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 't' $($t:tt)*) => { t try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'o' $($t:tt)*) => { o try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'l' $($t:tt)*) => { l try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'c' $($t:tt)*) => { c try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'd' $($t:tt)*) => { d try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'u' $($t:tt)*) => { u try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'g' $($t:tt)*) => { g try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'p' $($t:tt)*) => { p try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'm' $($t:tt)*) => { m try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'h' $($t:tt)*) => { h try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'b' $($t:tt)*) => { b try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'y' $($t:tt)*) => { y try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'f' $($t:tt)*) => { f try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'v' $($t:tt)*) => { v try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'k' $($t:tt)*) => { k try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'w' $($t:tt)*) => { w try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'z' $($t:tt)*) => { z try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'x' $($t:tt)*) => { x try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'j' $($t:tt)*) => { j try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'q' $($t:tt)*) => { q try_into_ident!( $prev_state $($t)* )};

    ($prev_state:tt 'A' $($t:tt)*) => { A try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'B' $($t:tt)*) => { B try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'C' $($t:tt)*) => { C try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'D' $($t:tt)*) => { D try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'E' $($t:tt)*) => { E try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'F' $($t:tt)*) => { F try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'G' $($t:tt)*) => { G try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'H' $($t:tt)*) => { H try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'I' $($t:tt)*) => { I try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'J' $($t:tt)*) => { J try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'K' $($t:tt)*) => { K try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'L' $($t:tt)*) => { L try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'M' $($t:tt)*) => { M try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'N' $($t:tt)*) => { N try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'O' $($t:tt)*) => { O try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'P' $($t:tt)*) => { P try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'Q' $($t:tt)*) => { Q try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'R' $($t:tt)*) => { R try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'S' $($t:tt)*) => { S try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'T' $($t:tt)*) => { T try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'U' $($t:tt)*) => { U try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'V' $($t:tt)*) => { V try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'W' $($t:tt)*) => { W try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'X' $($t:tt)*) => { X try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'Y' $($t:tt)*) => { Y try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 'Z' $($t:tt)*) => { Z try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '0' $($t:tt)*) => { zero try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '1' $($t:tt)*) => { one try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '2' $($t:tt)*) => { two try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '3' $($t:tt)*) => { three try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '4' $($t:tt)*) => { four try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '5' $($t:tt)*) => { five try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '6' $($t:tt)*) => { six try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '7' $($t:tt)*) => { seven try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '8' $($t:tt)*) => { eight try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt '9' $($t:tt)*) => { nine try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 0 $($t:tt)*) => { zero try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 1 $($t:tt)*) => { one try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 2 $($t:tt)*) => { two try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 3 $($t:tt)*) => { three try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 4 $($t:tt)*) => { four try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 5 $($t:tt)*) => { five try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 6 $($t:tt)*) => { six try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 7 $($t:tt)*) => { seven try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 8 $($t:tt)*) => { eight try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt 9 $($t:tt)*) => { nine try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt {$($contents:tt)*} $($t:tt)*) => { {$($contents)*} try_into_ident!( $prev_state $($t)* )};
    ($prev_state:tt [$($contents:tt)*] $($t:tt)*) => { try_into_ident!( (@class $($t)* $prev_state)  )};
    ($prev_state:tt ($($contents:tt)*) $($t:tt)*) => { try_into_ident!( (@group $($t)* $prev_state)  )};
}

pub(crate) use ascii;
pub(crate) use try_into_ident;